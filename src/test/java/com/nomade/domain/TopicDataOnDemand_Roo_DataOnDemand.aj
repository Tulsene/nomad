// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nomade.domain;

import com.nomade.domain.Confidentiality;
import com.nomade.domain.Topic;
import com.nomade.domain.TopicDataOnDemand;
import com.nomade.domain.UserNomade;
import com.nomade.service.TopicService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TopicDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TopicDataOnDemand: @Component;
    
    private Random TopicDataOnDemand.rnd = new SecureRandom();
    
    private List<Topic> TopicDataOnDemand.data;
    
    @Autowired
    TopicService TopicDataOnDemand.topicService;
    
    public Topic TopicDataOnDemand.getNewTransientTopic(int index) {
        Topic obj = new Topic();
        setConfidentiality(obj, index);
        setContent(obj, index);
        setCreated(obj, index);
        setNomade(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void TopicDataOnDemand.setConfidentiality(Topic obj, int index) {
        Confidentiality confidentiality = Confidentiality.class.getEnumConstants()[0];
        obj.setConfidentiality(confidentiality);
    }
    
    public void TopicDataOnDemand.setContent(Topic obj, int index) {
        String content = "content_" + index;
        obj.setContent(content);
    }
    
    public void TopicDataOnDemand.setCreated(Topic obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void TopicDataOnDemand.setNomade(Topic obj, int index) {
        UserNomade nomade = null;
        obj.setNomade(nomade);
    }
    
    public void TopicDataOnDemand.setTitle(Topic obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public Topic TopicDataOnDemand.getSpecificTopic(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Topic obj = data.get(index);
        BigInteger id = obj.getId();
        return topicService.findTopic(id);
    }
    
    public Topic TopicDataOnDemand.getRandomTopic() {
        init();
        Topic obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return topicService.findTopic(id);
    }
    
    public boolean TopicDataOnDemand.modifyTopic(Topic obj) {
        return false;
    }
    
    public void TopicDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = topicService.findTopicEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Topic' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Topic>();
        for (int i = 0; i < 10; i++) {
            Topic obj = getNewTransientTopic(i);
            try {
                topicService.saveTopic(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
