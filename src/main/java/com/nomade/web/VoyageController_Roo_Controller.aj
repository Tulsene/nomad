// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nomade.web;

import com.nomade.domain.StatusVoyage;
import com.nomade.domain.Voyage;
import com.nomade.service.EtapeService;
import com.nomade.service.UserService;
import com.nomade.service.VoyageService;
import com.nomade.web.VoyageController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect VoyageController_Roo_Controller {
    
    @Autowired
    VoyageService VoyageController.voyageService;
    
    @Autowired
    EtapeService VoyageController.etapeService;
    
    @Autowired
    UserService VoyageController.userService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String VoyageController.create(@Valid Voyage voyage, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, voyage);
            return "voyages/create";
        }
        uiModel.asMap().clear();
        voyageService.saveVoyage(voyage);
        return "redirect:/voyages/" + encodeUrlPathSegment(voyage.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String VoyageController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Voyage());
        return "voyages/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String VoyageController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        uiModel.addAttribute("voyage", voyageService.findVoyage(id));
        uiModel.addAttribute("itemId", id);
        return "voyages/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String VoyageController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("voyages", voyageService.findVoyageEntries(firstResult, sizeNo));
            float nrOfPages = (float) voyageService.countAllVoyages() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("voyages", voyageService.findAllVoyages());
        }
        return "voyages/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String VoyageController.update(@Valid Voyage voyage, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, voyage);
            return "voyages/update";
        }
        uiModel.asMap().clear();
        voyageService.updateVoyage(voyage);
        return "redirect:/voyages/" + encodeUrlPathSegment(voyage.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String VoyageController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, voyageService.findVoyage(id));
        return "voyages/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String VoyageController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Voyage voyage = voyageService.findVoyage(id);
        voyageService.deleteVoyage(voyage);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/voyages";
    }
    
    void VoyageController.populateEditForm(Model uiModel, Voyage voyage) {
        uiModel.addAttribute("voyage", voyage);
        uiModel.addAttribute("etapes", etapeService.findAllEtapes());
        uiModel.addAttribute("statusvoyages", Arrays.asList(StatusVoyage.values()));
        uiModel.addAttribute("usernomades", userService.findAllUserNomades());
    }
    
    String VoyageController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
